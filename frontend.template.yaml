AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a S3 bucket, Cloudfront distribution and Cognito"

Parameters:
  env:
    Description: Environment for the frontend like dev, staging or prod
    Type: String
    Default: "dev"
  cognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: "dvix-domain"

Resources:

  S3ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${env}-dvix-static-webapp"

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: "origin access control(OAC) for allowing cloudfront to access S3 bucket"
        Name: !Sub "${env}-static-webapp-hosting-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3ContentBucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3ContentBucket.RegionalDomainName
            Id: static-hosting
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: "true"
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        HttpVersion: http2
        WebACLId: '{{resolve:ssm:/common-resources/waf-arn/cloudfront}}'
        # Aliases:
        #   - web.example.com #TODO: change this to your website domain url
        # Only use certificate if needed
        # ViewerCertificate:
        #   AcmCertificateArn: "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/1xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx" #TODO: change this
        #   MinimumProtocolVersion: TLSv1.2_2021
        #   SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          Compress: true
          TargetOriginId: static-hosting
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https

  S3ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - S3ContentBucket
    Properties:
      Bucket: !Ref S3ContentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Join ["", [!GetAtt S3ContentBucket.Arn, "/*"]]
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # Cognito 

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub "${env}-${cognitoDomain}-user-pool"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - CloudFrontDistribution
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        # Add your callback urls here
        - !Join ["", ["https://", !GetAtt CloudFrontDistribution.DomainName]]
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        # This is where you put your identity providers like google/facebook etc
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn:
      - UserPool
    Properties:
      Domain: !Sub "${env}-dvix-domain"
      UserPoolId: !Ref UserPool

  # SSM Parameters

  CognitoHostedUrlParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: 'Cognito Hosted url'
      Name: !Sub '/${env}/resources/frontend/hostedurl'
      Type: String
      Value: !Join ["", [!Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=", "https://", !GetAtt CloudFrontDistribution.DomainName]]
